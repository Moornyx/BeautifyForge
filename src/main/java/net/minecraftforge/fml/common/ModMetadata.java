package net.minecraftforge.fml.common;

import java.util.List;
import java.util.Set;

import net.minecraft.client.resources.I18n;
import net.minecraftforge.fml.common.versioning.ArtifactVersion;

import com.google.common.base.Joiner;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.gson.annotations.SerializedName;

/**
 * @author cpw
 *
 */
public class ModMetadata
{
    @SerializedName("modid")
    public String modId;
    public String name;
    public String description = "";

    public String url = "";
    @Deprecated //Never really used for anything and format is undefined. See updateJSON for replacement.
    public String updateUrl = "";
    /**
     * URL to update json file. Format is defined here: https://gist.github.com/LexManos/7aacb9aa991330523884
     */
    public String updateJSON = "";

    public String logoFile = "";
    public String version = "";
    public List<String> authorList = Lists.newArrayList();
    public String credits = "";
    public String parent = "";
    public String[] screenshots;

    // this field is not for use in the json
    public transient ModContainer parentMod;
    // this field is not for use in the json
    public transient List<ModContainer> childMods = Lists.newArrayList();

    public boolean useDependencyInformation;
    public Set<ArtifactVersion> requiredMods = Sets.newHashSet();
    public List<ArtifactVersion> dependencies = Lists.newArrayList();
    public List<ArtifactVersion> dependants = Lists.newArrayList();
    // this field is not for use in the json
    public transient boolean autogenerated;

    public ModMetadata()
    {
    }

    public String getChildModCountString()
    {
    	int childModsCount=childMods.size()%10;
    	String childModsDesc = "";
    	if (childMods.size() == 0) {
    		childModsDesc=I18n.format("fml.modlist.nochild");
    	}
    	else if (childModsCount == 1) {
    		childModsDesc=I18n.format("fml.modlist.child.count1");
    	}
    	
    	else {
    		childModsDesc=I18n.format("fml.modlist.child.count");
    	}
//        return String.format("%d child mod%s", childMods.size(), childMods.size() != 1 ? "s" : "");
    	return childModsDesc;
    }

    public String getAuthorList()
    {
        return Joiner.on(", ").join(authorList);
    }

    public String getChildModList()
    {
        return Joiner.on(", ").join(childMods.stream().map(ModContainer::getName).iterator());
    }

    public String printableSortingRules()
    {
        return "";
    }
}